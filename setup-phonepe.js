#!/usr/bin/env node

/**
 * PhonePe Integration Setup Script
 * 
 * This script helps you set up PhonePe API credentials for live testing.
 * Run with: node setup-phonepe.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🔴 PhonePe Live Integration Setup\n');
console.log('This will help you configure PhonePe API credentials for live testing.\n');

const questions = [
  {
    key: 'PHONEPE_MERCHANT_ID',
    question: 'Enter your PhonePe Merchant ID: ',
    description: 'Get this from your PhonePe merchant dashboard'
  },
  {
    key: 'PHONEPE_SALT_KEY',
    question: 'Enter your PhonePe Salt Key: ',
    description: 'API salt key from PhonePe dashboard'
  },
  {
    key: 'PHONEPE_SALT_INDEX',
    question: 'Enter Salt Index (usually 1): ',
    description: 'Salt index number, typically 1',
    default: '1'
  },
  {
    key: 'PHONEPE_PRODUCTION',
    question: 'Use Production mode? (y/N): ',
    description: 'Set to "y" for live payments, "N" for sandbox',
    default: 'false'
  },
  {
    key: 'NEXT_PUBLIC_BASE_URL',
    question: 'Enter your base URL (for webhooks): ',
    description: 'Your application URL (e.g., https://yourdomain.com)',
    default: 'http://localhost:3000'
  }
];

const credentials = {};

async function askQuestion(questionObj) {
  return new Promise((resolve) => {
    const { key, question, description, default: defaultValue } = questionObj;
    
    console.log(`\n📋 ${description}`);
    rl.question(question, (answer) => {
      let value = answer.trim() || defaultValue || '';
      
      // Special handling for production flag
      if (key === 'PHONEPE_PRODUCTION') {
        value = (value.toLowerCase() === 'y' || value.toLowerCase() === 'yes') ? 'true' : 'false';
      }
      
      credentials[key] = value;
      resolve();
    });
  });
}

async function setupCredentials() {
  console.log('Please provide your PhonePe merchant credentials:\n');
  
  for (const question of questions) {
    await askQuestion(question);
  }
  
  // Generate .env.local file
  const envContent = Object.entries(credentials)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');
    
  const fullEnvContent = `# PhonePe API Configuration
# Generated by setup script - ${new Date().toISOString()}

${envContent}

# Application Configuration
NODE_ENV=development
`;

  try {
    fs.writeFileSync('.env.local', fullEnvContent);
    console.log('\n✅ Configuration saved to .env.local');
    console.log('\n🚀 Next steps:');
    console.log('1. Restart your application: npm run build && npm start');
    console.log('2. Toggle "PhonePe Live Integration" on the payment form');
    console.log('3. Test with a real UPI ID and small amount (₹1-10)');
    console.log('\n⚠️  Important: Test in sandbox mode before going live!');
    
    if (credentials.PHONEPE_PRODUCTION === 'true') {
      console.log('\n🔴 PRODUCTION MODE ENABLED - Real money will be processed!');
    } else {
      console.log('\n🧪 Sandbox mode enabled - Safe for testing');
    }
    
  } catch (error) {
    console.error('\n❌ Error saving configuration:', error.message);
  }
  
  rl.close();
}

// Check if credentials already exist
if (fs.existsSync('.env.local')) {
  console.log('⚠️  .env.local already exists.');
  rl.question('Do you want to overwrite it? (y/N): ', (answer) => {
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      setupCredentials();
    } else {
      console.log('Setup cancelled. Your existing .env.local is unchanged.');
      rl.close();
    }
  });
} else {
  setupCredentials();
}